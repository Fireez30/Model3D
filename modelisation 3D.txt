#include "headers/Voxel.h"
 
// Constructors
Voxel::Voxel() {}
Voxel::~Voxel() {}
 
Voxel::Voxel(Point* ct, double l) {
    this->ct = ct;
    this->l = l;
    this->subCenterPoints = new std::vector<Point>();
    this->cornerPoints = new std::vector<Point>();
    computeDivision();
    computeCornerPoints();
}
 
Point*  Voxel::getCenter() {
    return ct;
}
double Voxel::getLength() {
    return l;
}
 
std::vector<Point>* Voxel::getCornerPoints() {
    return cornerPoints;
}
 
std::vector<Point>* Voxel::getSubCenterPoints() {
    return subCenterPoints;
}
 
void Voxel::tracePoint(Point *A,Vector color) {
  glColor3f(color.getX(),color.getY(),color.getZ());
  glBegin(GL_POINTS);
    glVertex3f(A->getX(),A->getY(),A->getZ());
    glEnd();
}
 
void  Voxel::traceQuad(Point* A, Point* B,Point* C,Point* D, Vector color) {
  glColor3f(color.getX(),color.getY(),color.getZ());
  glBegin(GL_QUADS);
    glVertex3f(A->getX(),A->getY(),A->getZ());
    glVertex3f(B->getX(),B->getY(),B->getZ());
    glVertex3f(C->getX(),C->getY(),C->getZ());
    glVertex3f(D->getX(),D->getY(),D->getZ());
  glEnd();
}
 
void Voxel::displayV() { // Point center, double length
  Point* a = new Point(ct->getX()+l/2, ct->getY()-l/2, ct->getZ()-l/2);
  Point* b = new Point(ct->getX()+l/2, ct->getY()+l/2, ct->getZ()-l/2);
  Point* c = new Point(ct->getX()-l/2, ct->getY()-l/2, ct->getZ()-l/2);
  Point* d = new Point(ct->getX()-l/2, ct->getY()+l/2, ct->getZ()-l/2);
  Point* e = new Point(ct->getX()+l/2, ct->getY()-l/2, ct->getZ()+l/2);
  Point* f = new Point(ct->getX()+l/2, ct->getY()+l/2, ct->getZ()+l/2);
  Point* g = new Point(ct->getX()-l/2, ct->getY()-l/2, ct->getZ()+l/2);
  Point* h = new Point(ct->getX()-l/2, ct->getY()+l/2, ct->getZ()+l/2);
 
  traceQuad(a,b,d,c,Vector(255,0,0));
  traceQuad(a,c,g,e,Vector(255,255,0));
  traceQuad(d,c,g,h,Vector(0,255,255));
  traceQuad(b,d,h,f,Vector(0,255,0));
  traceQuad(a,b,f,e,Vector(255,0,0));
  traceQuad(e,f,h,g,Vector(0,0,255));
/*  traceQuad(a,b,d,c,Vector(255,255,255));
  traceQuad(a,c,g,e,Vector(255,255,255));
  traceQuad(d,c,g,h,Vector(255,255,255));
  traceQuad(b,d,h,f,Vector(255,255,255));
  traceQuad(a,b,f,e,Vector(255,255,255));
  traceQuad(e,f,h,g,Vector(255,255,255));*/
 
/*  tracePoint(ct,Vector(255,0,0));
  tracePoint(a,Vector(255,255,0));
  tracePoint(b,Vector(255,255,0));
  tracePoint(c,Vector(255,255,0));
  tracePoint(d,Vector(255,255,0));
  tracePoint(e,Vector(255,255,0));
  tracePoint(f,Vector(255,255,0));
  tracePoint(g,Vector(255,255,0));
  tracePoint(h,Vector(255,255,0));*/
}
 
void Voxel::computeDivision() {    
 
    Point* a = new Point(ct->getX()+l/4, ct->getY()-l/4, ct->getZ()-l/4);
    Point* b = new Point(ct->getX()+l/4, ct->getY()+l/4, ct->getZ()-l/4);
    Point* c = new Point(ct->getX()-l/4, ct->getY()-l/4, ct->getZ()-l/4);
    Point* d = new Point(ct->getX()-l/4, ct->getY()+l/4, ct->getZ()-l/4);
    Point* e = new Point(ct->getX()+l/4, ct->getY()-l/4, ct->getZ()+l/4);
    Point* f = new Point(ct->getX()+l/4, ct->getY()+l/4, ct->getZ()+l/4);
    Point* g = new Point(ct->getX()-l/4, ct->getY()-l/4, ct->getZ()+l/4);
    Point* h = new Point(ct->getX()-l/4, ct->getY()+l/4, ct->getZ()+l/4);
    subCenterPoints->push_back(d);
    subCenterPoints->push_back(c);
    subCenterPoints->push_back(a);
    subCenterPoints->push_back(b);
    subCenterPoints->push_back(g);
    subCenterPoints->push_back(h);
    subCenterPoints->push_back(e);
    subCenterPoints->push_back(f);
}
 
void Voxel::computeCornerPoints() {
    Point* a = new Point(ct->getX()+l/2, ct->getY()-l/2, ct->getZ()-l/2);
    Point* b = new Point(ct->getX()+l/2, ct->getY()+l/2, ct->getZ()-l/2);
    Point* c = new Point(ct->getX()-l/2, ct->getY()-l/2, ct->getZ()-l/2);
    Point* d = new Point(ct->getX()-l/2, ct->getY()+l/2, ct->getZ()-l/2);
    Point* e = new Point(ct->getX()+l/2, ct->getY()-l/2, ct->getZ()+l/2);
    Point* f = new Point(ct->getX()+l/2, ct->getY()+l/2, ct->getZ()+l/2);
    Point* g = new Point(ct->getX()-l/2, ct->getY()-l/2, ct->getZ()+l/2);
    Point* h = new Point(ct->getX()-l/2, ct->getY()+l/2, ct->getZ()+l/2);
    cornerPoints->push_back(d);
    cornerPoints->push_back(c);
    cornerPoints->push_back(a);
    cornerPoints->push_back(b);
    cornerPoints->push_back(g);
    cornerPoints->push_back(h);
    cornerPoints->push_back(e);
    cornerPoints->push_back(f);
}
 
void Voxel::displayDivision() {
    Voxel* temp;
    for(int i =0; i<8; i++)
    {
        temp = new Voxel(&subCenterPoints->at(i),(double)l/2.0);
        temp->displayV();
    }
}
 
int Voxel::isInsideSphere(Point* cts, double ray) { // return 0 if vox inside Sphere,
                                                    //  return 1 if outside
                                                    // return 2 if intersection
    int retour = 0;
    int cpt = 0;
    for(int k=0; k<8; k++)
    {
        if(cornerPoints->at(k).isInsideSphere(cts, ray)==1)
        {
            retour = 1;
            cpt++;
        }
    }
    if(cpt<7 && cpt>0)
        return 2;
    else
        return retour;
}